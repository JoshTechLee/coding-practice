// https://www.hackerrank.com/challenges/apple-and-orange/problem
// Note: don't forget to have <= or >= to have a range and include

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    public static int[] appleOrange (int[] house, int[] trees, int[] fruits, int[] apple, int[] orange){
        int onApple = 0;
        int onOrange = 0;
        for(int i = 0; i < fruits[0]; i++){
            if (((apple[i] + trees[0]) >= house[0]) && ((apple[i] + trees[0]) <= house[1]))
                onApple++;
        }
        for(int i = 0; i < fruits[1]; i++){
            if (((orange[i] + trees[1]) >= house[0]) && ((orange[i] + trees[1]) <= house[1]))
                onOrange++;
        }
        int[] onHouse = {onApple, onOrange};
        return onHouse;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int s = in.nextInt();
        int t = in.nextInt();
        int a = in.nextInt();
        int b = in.nextInt();
        int m = in.nextInt();
        int n = in.nextInt();
        
        int[] house = {s, t};
        int[] trees = {a, b};
        int[] fruits = {m, n};
                
        int[] apple = new int[m];
        for(int apple_i=0; apple_i < m; apple_i++){
            apple[apple_i] = in.nextInt();
        }
        int[] orange = new int[n];
        for(int orange_i=0; orange_i < n; orange_i++){
            orange[orange_i] = in.nextInt();
        }
        
        int[] onHouse = appleOrange(house, trees, fruits, apple, orange);
        System.out.println(onHouse[0]);
        System.out.println(onHouse[1]);

        
        
    }
}
